자바스크립트의 실행 컨텍스트
    실행할 코드에 재공할 환경 정보들을 모아놓은 객체
    자바스크립트는 어떤 실행 컨텍스트가 활성화되는 시점에 다음과 같은 일을 한다.
        선언된 변수를 위로 끌어올린다. (호이스팅)
        외부 환경 정보를 구성한다.
        this 값을 설정한다.

콜스택
    실행 컨텍스트를 구성하고 이것을 스택의 종류인 콜스택에 쌓아올린다.
    가장 위에 쌓여있는 컨텍스트와 관련된 코드를 실행하는 방법으로 코드의 환경 및 순서를 보장할 수 있다.
    특정 실행 컨텍스트가 생성되는(또는 활성화되는) 시점이 콜 스택의 맨 위에 쌓이는(노출되는) 순간을 의미

컨텍스트의 구성
    구성방법
        전역 공간
        eval()함수
        함수

실행 컨텍스트 객체에 담기는 정보
    variableEnvironment
        현재 컨텍스트 내의 식별자 정보(= record)
            var a = 3의 경우 var a를 의미
        외부 환경 정보 (= outer)
        선언 시점 LexicalEnvironmnet의 snapshot (생길 때의 모습)
    LexicalEnvironmnet
        variableEnvironment와 동일하지만, 변경사항을 실시간으로 반영
    ThisBinding
        this 식별자가 바라봐야할 객체

실행 컨텍스트를 생성할 때, VE에 정보를 먼저 담은 다음, 이를 그대로 복사하여 LE를 만들고 이후에 주로 LE를 활용

record와 호이스팅
    개요
        현재 컨텍스트와 관련된 코드의 식별자 정보들이 저장(수집)된다.
        기록된다라고 이해해보면, record와 일맥상통
        수집 대상 정보: 함수에 지정된 매개변수 식별자, 함수 자체, var로 선언된 변수 식별자등
        컨텍스트 내부를 처음부터 끝까지 순서대로 훑어가며 수집
    호이스팅
        레코드의 수집 과정
        변수 정보 수집을 모두 마쳤더라도 아직 실행 컨텍스트가 관여할 코드는 실행 전의 상태(JS 엔진은 코드를 실행 전 이미 모든 변수 정보를 알고 있는 것)
        변수 정보 수집 과정을 이해하기 쉽게 설명한 '가상 개념'
    호이스팅 규칙
        1. 매개변수 및 변수는 선언부를 호이스팅합니다.
        2. 함수 선언은 전체를 호이스팅합니다.

함수 정의의 3가지 방식
    함수 선언문
        function a() {}
    함수 표현식
        익명함수표현식
            var b = fucntion () {}
        기명함수표현식
            var c = fucntion d() {} // 호출시 c() / d() 에러

협업의 과정에서 함수 표현식을 사용하자
    함수가 호이스팅이 되어 동명의 함수가 있을 경우 에러가 발생할 수 있다.