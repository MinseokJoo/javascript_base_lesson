변수 vs 상수
    변수: 변수 영역 메모리를 변경할 수 있음
    상수: 변수 영역 메모리를 변결할 수 없음

불변하다. vs 불변하지 않다.
    불변하다: 데이터 영역 메모리를 변경할 수 없음
    불변하지 않다: 데이터 영역 메모리를 변경할 수 있음

기본형 데이터의 변수 할당 과정
    변수 영역 메모리 => '메모리 주소/변수명, 데이터 영역의 주소값'의 형태로 저장
    데이터 영역 메모리 => '메모리 주소/데이터'
    `var a = 1;`
    `a = 2` 로 변경 했을 시 1을 수정하지 않고 데이터 영역에 2를 추가하고 그 주소값을 a가 저장된 곳의 데이터 영역 주소값을 수정
    그렇기에 불변하다는 것을 알 수 있고,
    사용되지 않는 데이터 영역에 저장된 1을 가비지 컬렉터가 수거를 함

참조형 데이터의 변수 할당 과정
    변수 영역 메모리 => '메모리 주소/변수명, 오브젝트를 위한 영역의 주소값'의 형태로 저장
    데이터 영역 메모리 => '메모리 주소/데이터'
    오브젝트를 위한 메모리 => '메모리 주소/ key, 데이터 영역의 주소값'
    `let user = {
        a: 1,
        b: "aaa"
    }`
    `user.a = 2`로 변경 되었을 시 1은 수정하지 않고 데이터 영역에 2를 추가, 그 주소값을 오브젝트를 위한 메모리에
    a가 저장된 곳의 데이터 영역 주소값을 수정
    그렇기에 불변하지 않음을 알 수 있다.

참조 카운트
    객체를 참조하는 변수나 다른 객체의 수를 나타내는 값
    참조 카운트가 0인 객체는 더 이상 사용되지 않으므로, 가비지 컬렉터에 의해 메모리에서 제거

가비지 컬렉터
    더이상 사용되지 않는 갳레를 자동으로 메모리에서 제거하는 역할을 합니다.
    자바스크립트는 가비지 컬렉션을 수행함으로써 개발자가 명시적으로 메모리 관리를 하지 않아도 되도록 지원합니다.
    자바스크립트 엔진에서 내부적으로 실행되며, 개발자는 가비지 컬렉션에 대한 직접적인 제어를 할 수 없습니다.

변수 복사의 비교
    기본형
    ```let a = 1
    let b = a
    b = 2```

    a와 1을 저장
    b를 a가 저장된 공간에서 1에 대한 주소값을 복사
    데이터 영역에서 2를 만들고 b가 저장된 공간에서 데이터 메모리 주소를 수정
    a와 b에 저장된 주소값이 다름

    참조형
    ```let a = {
        c: 10,
        d: "ddd"
    }
    let b = a
    b.c = 20```

    a, (c, d), (10, "ddd")를 저장
    b를 a가 저장된 공간에서 a에서 object를 위한 메모리 주소값을 복사
    20을 만들고 c에 저장된 데이터 영역 주소값을 수정
    a와 b가 가진 주소값이 같음
    수정할 시 a 또한 수정이 된다.